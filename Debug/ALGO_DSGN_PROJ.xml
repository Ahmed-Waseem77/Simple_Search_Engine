<?xml version="1.0"?>
<doc>
    <assembly>
        "ALGO_DSGN_PROJ"
    </assembly>
    <members>
        <member name="M:op_RightShift(std.basic_istream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,webpage*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
in stream operator overload
</summary>
            <param name="is">in stream</param>
            <param name="wp">webpage</param>
            <returns />
        </member>
        <member name="M:op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,webpage!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
out stream operator overload
</summary>
            <param name="os">out stream</param>
            <param name="wp">webpage</param>
            <returns />
        </member>
        <member name="M:view_menu(webGraph*,std.map&lt;System.Int32,webpage**,std.less&lt;System.Int32&gt;,std.allocator&lt;std.pair&lt;System.Int32!System.Runtime.CompilerServices.IsConst,webpage**&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
viewing menu
</summary>
            <param name="g"> graph that is intialized in main</param>
            <param name="results">search results</param>
            <param name="index">chosen result inde</param>
            <param name="NewSearch">boolean if user will do a new search</param>
        </member>
        <member name="M:search_menu(webGraph*,std.map&lt;System.Int32,webpage**,std.less&lt;System.Int32&gt;,std.allocator&lt;std.pair&lt;System.Int32!System.Runtime.CompilerServices.IsConst,webpage**&gt;&gt;&gt;,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
search menu
</summary>
            <param name="g">graph that is initialized in main</param>
            <param name="indexedResutls">search results with their indexes in menu</param>
            <param name="NewSearch">boolean if user will do a newsearch</param>
        </member>
        <member name="M:main_menu(webGraph*)">
            <summary>
main menu
</summary>
            <param name="g">initialized with graph from main</param>
        </member>
        <member name="M:clear_console">
            <summary>
clears console
</summary>
        </member>
        <member name="M:utils.write_to_files(webGraph*)">
            <summary>
updates files with new calues of impressions and clickthroughs after user session
</summary>
            <param name="g">graph intialized in main</param>
        </member>
        <member name="M:utils.normalizeQry(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary>
normalizes the search query into a vector of strings
each string is a keyword or a token
</summary>
            <param name="qry">query as a string</param>
            <returns>vector of string</returns>
        </member>
        <member name="M:utils.intialize_webGraph">
            <summary>
intialization of the graph of webpages
</summary>
            <returns>pointer to webGraph</returns>
        </member>
        <member name="M:utils.parse_webEdges">
            <summary>
parses edges csv
</summary>
            <returns />
        </member>
        <member name="M:utils.parse_webpages">
            <summary>
parses webpages from csv files 
</summary>
            <returns>vector of webpages</returns>
        </member>
        <member name="T:utils">
            <summary>
utilties class
contains all functions unrelated to other classes
</summary>
        </member>
        <member name="M:webGraph.search(std.vector&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,std.allocator&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;&gt;&gt;)">
            <summary>
searches for webpages in a graph given a query
</summary>
            <param name="normalizedQry">The normalized query</param>
            <returns>vector of webpages</returns>
        </member>
        <member name="M:webGraph.calculate_scores">
            <summary>
calculates scores of all webpages (used in initialization)
</summary>
        </member>
        <member name="M:webGraph.calculate_ranks">
            <summary>
calculates rank until there is no longer a change in pagerank (used in initialization)
</summary>
        </member>
        <member name="M:webGraph.calculate_ranks_iteration(webGraph*,std.set&lt;webpage**,std.less&lt;webpage**&gt;,std.allocator&lt;webpage**&gt;&gt;)">
            <summary>
calculates one iteration of page rank with a damping factor of 0.15
</summary>
            <param name="transpose">transpose of the graph</param>
            <param name="sinkNodes">sink webpages</param>
            <returns>returns the webpages with their page rank results for the iteration</returns>
        </member>
        <member name="M:webGraph.calculate_ctr">
            <summary>
calculates all the ctr of a graph (used in initialization)
</summary>
        </member>
        <member name="M:webGraph.transpose">
            <summary>
gets the transpose of the graph
</summary>
            <returns>the transpose of the graph</returns>
        </member>
        <member name="M:webGraph.get_sinkNodes(webGraph*)">
            <summary>
retrieves sink webpages in a graph
</summary>
            <param name="transpose">the transpose of graph</param>
            <returns>returns set of sink webpages</returns>
        </member>
        <member name="M:webGraph.print_webpages_content">
            <summary>
prints graph's webpage content
</summary>
        </member>
        <member name="M:webGraph.print_graph">
            <summary>
prints graph as a webpage pointing to another
</summary>
        </member>
        <member name="M:webGraph.dfs(webpage*)">
            <summary>
dfs search: not used
</summary>
            <param name="n">node</param>
        </member>
        <member name="M:webGraph.add_edge(webpage*,webpage*)">
            <summary>
adds an edge to the graph
</summary>
            <param name="src">source edge</param>
            <param name="dst">destination edge</param>
        </member>
        <member name="M:webGraph.#ctor(std.vector&lt;webEdge**,std.allocator&lt;webEdge**&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,std.set&lt;webpage**,std.less&lt;webpage**&gt;,std.allocator&lt;webpage**&gt;&gt;,std.less&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basi">
            <summary>
parameterized constructor
</summary>
            <param name="edges">vector of webEdges</param>
            <param name="searchList">search list of keyword keys and a set of webpages</param>
        </member>
        <member name="M:webGraph.#ctor">
            <summary>
constructor
</summary>
        </member>
        <member name="T:webGraph">
            <summary>
graph of webpages implemented as an adjacency list
</summary>
        </member>
        <member name="T:webEdge">
            <summary>
webEdge class
</summary>
        </member>
        <member name="T:keyIt">
            <summary>
iterator class to iterate on map keys
used for ease of coding
</summary>
        </member>
        <member name="M:webpage.update_score">
            <summary>
updates score
</summary>
            <summary>
updates webpage's score
</summary>
        </member>
        <member name="M:webpage.update_ctr">
            <summary>
updates click through rate
</summary>
            <summary>
updates webpage's click through rate
</summary>
        </member>
        <member name="M:webpage.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,std.vector&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,std.allocator&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignU">
            <summary>
parameterized constructor of webpage
</summary>
            <param name="url">string of url</param>
            <param name="keywords">vector of keywords</param>
            <param name="impressions">impressions of webpage</param>
            <param name="clickthr">click throughs of a webpage</param>
            <param name="ctr">click through rate of a webpage</param>
            <param name="rank">page rank</param>
            <param name="score">score</param>
        </member>
        <member name="M:webpage.#ctor">
            <summary>
constructor of webpage
</summary>
        </member>
    </members>
</doc>